@startuml Eriantys

class AssistantCard {
    motherNatureMaxMoves : Int
    turnPriority : Int

    {static}+getDeck() : ArrayList<AssistantCard>[10]
}

class Game {
    players : Player[3]
    islands : Island[12]
    studentsBag : RandomizedStudentsContainer
    'relative to islands index, or alternatively we can link directly the island'
    motherNaturePosition : Int
    rounds : ArrayList<Rounds>
    characterCards : ArrayList<CharacterCard>[3]

    currentProfessors : Map<Student, Player>

    +initializeGame()
    -checkAndMergeIslands(...)
    +addOnReceivedMessageListener(...)
    +getProfessorsForPlayer(p: Player)
    -updateProfessors()
}

class Round {
    playedAssistantCards : SortedMap<Player, AssistantCard>
    playedCharacterCards : SortedMap<Player, CharacterCard>

    clouds : ArrayList<StudentsContainer> //max students = 3 or 4
    iterator() : Iterable<Player>
}

abstract AStudentsContainer {
    -students : Map<Student, Integer>
    -maxStudents : int

    +merge(anotherContainer : AStudentsContainer) throws NoMoreSpaceException
    +getStudentsCopy() : Map<Student, Integer>
    +getCount(student : Student) : int
}

class RandomizedStudentsContainer {
    'shuffled once, only when created'

    +pickRandom(howMany : Integer) : StudentsContainer[howMany]
}

class StudentsContainer {
    +addStudent(student : Student)
    +removeStudent(student : Student) throws StudentNotFoundException
    +addOnStudentNumberReachedListener(student : Student, count : int) //for coins
}

class Player {
    nickname : String
    entrance : StudentsContainer
    students : StudentsContainer
    towersCount : int
    towerColor : Tower
    deck : ArrayList<AssistantCard>
    coins : Int = 1
    client : Client

    +calculateInfluence(island : Island) : Int
}

/'
useless and wrong

interface RandomPickable {
    +pickRandom(howMany : Int) : ArrayList<Student>
}
'/

/' removed for now
class GroupOfIsland {

}
'/

class Island {
    students : StudentsContainer
    towersCount : int
    towerColor : Tower

    --
    + Island()
    + Island(student : Student)
    +getSize() : Int //it's determined by looking at towers.size
    +merge(anotherIsland : Island) : Island //return a new merged island
}

'abstract Card {}'

abstract CharacterCard {
    cost : Int
    used : Int
    'same for everyone: cost + 1 * (used > 0)'

    +getCost() : Int
    --
    //used at the beginning of the game
    {static}+generateRandomCards() : ArrayList<CharacterCard[3]>
}

class MonkCharacterCard {
    'redefine cost'
    cost : Int = 1
}

class FarmerCharacterCard {
    'redefine cost'
    cost : Int = 2
}

class HeraldCharacterCard {
    'redefine cost'
    cost : Int = 3
}

class PostmanCharacterCard {
    'redefine cost'
    cost : Int = 1
}

class GrandmaCharacterCard {
    'redefine cost'
    cost : Int = 2
}

class CentaurCharacterCard {
    'redefine cost'
    cost : Int = 3
}

class JesterCharacterCard {
    'redefine cost'
    cost : Int = 1
}

class KnightCharacterCard {
    'redefine cost'
    cost : Int = 2
}

enum Tower {
    WHITE
    BLACK
    GREY
}

enum Student {
    YELLOW
    BLUE
    GREEN
    RED
    PINK
}

/'
class Client {
    clientSocket : Socket

    +sendMessage(message : Message)
    +addMessageReceivedObserver()
}

interface MessageReceivedObserver {
    onMessageReceived(message : Message)
}

class Server {
    serverSocket : Socket
    activeGames : ArrayList<Game>

    +getInstance() : Server
    +startServer()
}

class App {
    +{static} main
}

interface Serializable {
    ...
}

abstract Message {
    parse()
}

interface Exportable {
    exportToJson() : String
    importFromJson(json : String)
}
'/

Game "2..4" *-- Player
Game "1" *-- StudentsContainer
Game "12" *-- Island
Game *-- Round
Game "3" *-- CharacterCard

Player "10" *-- AssistantCard
Player *-- Tower
Player *-- StudentsContainer

StudentsContainer --|> AStudentsContainer
RandomizedStudentsContainer --|> AStudentsContainer

Student --> AStudentsContainer

/'Island *-- Student
Island *-- Tower'/
Island *-- StudentsContainer

/'StudentsBag *-- Student'/

'Round --> AssistantCard'

/'
StudentsBag ..|> RandomPickable
CharacterCardDeck ..|> RandomPickable
'/


/'
CharacterCard --|> Card
AssistantCard --|> Card
'/

MonkCharacterCard --|> CharacterCard
FarmerCharacterCard --|> CharacterCard
HeraldCharacterCard --|> CharacterCard
PostmanCharacterCard --|> CharacterCard
GrandmaCharacterCard --|> CharacterCard
CentaurCharacterCard --|> CharacterCard
JesterCharacterCard --|> CharacterCard
KnightCharacterCard --|> CharacterCard

/'
Client --> Message

Server --> Message

Message ..|> Serializable

Player --> Client

App --> Server
Server --> Client
'/
@enduml