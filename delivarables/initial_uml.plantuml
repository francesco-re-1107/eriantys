@startuml Eriantys

class AssistantCard {
    motherNatureMaxMoves : Int
    turnPriority : Int

    +getNewStandardDeck() : ArrayList<AssistantCard>
}

class Game {
    players : Player[4]
    islands : Island[12]
    studentsBag : StudentsBag
    motherNaturePosition : Int
    currentInfluence

    +initializeGame()
}

class Round {
    playedCards : SortedMap<Player, AssistantCard>
    clouds : ArrayList<Set<Student>[N]>[N]
    actions : ArrayList<Action>
    iterator() : Iterable<Player>
}

class Action {

}

class StudentsBag {
    students : ArrayList<Student>[120]
}

class Player {
    entrance : Set<Student>[9]
    towers : Set<Tower>[8]
    'todo: use 5 different arrays'
    students : Student[]
    towers : Tower[]
    deck : ArrayList<AssistantCard>
    coins : Int
    client : Client

    +calculateInfluence(island : Island) : Int
}

interface RandomPickable {
    +pickRandom(howMany : Int) : ArrayList<Student>
}


class GroupOfIsland {

}

class Island {
    students : Student
    towers : Tower[]
    +merge(anotherIsland : Island) : Island
}

abstract Card {}

abstract CharacterCard {
    cost : Int
    used : Int
    'same for everyone: cost + 1 * (used > 0)'
    +getCost : Int
}

class CharacterCard1 {
    'redefine cost'
}

class CharacterCard2 {
    'redefine cost'
}

class CharacterCard3 {
    'redefine cost'
}


class Tower {
    color : TowerColor
}

enum TowerColor {
    WHITE
    BLACK
    GREY
}


class Student {
    color : PawnColor
}

enum PawnColor {
    YELLOW
    BLUE
    GREEN
    RED
    PINK
}

class Client {
    clientSocket : Socket

    +sendMessage(message : Message)
    +addMessageReceivedObserver()
}

interface MessageReceivedObserver {
    onMessageReceived(message : Message)
}


class CharacterCardDeck {
    characterCards : CharacterCard
}

class Server {
    serverSocket : Socket
    getInstance() : Server

    +startServer()
}

class Main {
    +{static} main
}

interface Serializable {
    ...
}

abstract Message {
    parse()
}

interface Exportable {
    exportToJson() : String
    importFromJson(json : String)
}

Game "2..4" *-- Player
Game "1" *-- StudentsBag
Game "12" *-- Island

Player "10" *-- AssistantCard
Player *-- Tower
Player *-- Student

Island *-- Student
Island *-- Tower

Tower --> TowerColor

Student --> PawnColor

StudentsBag *-- Student
CharacterCardDeck *-- CharacterCard

Round --> AssistantCard

StudentsBag ..|> RandomPickable
CharacterCardDeck ..|> RandomPickable

Message ..|> Serializable

CharacterCard --|> Card
AssistantCard --|> Card

CharacterCard1 --|> CharacterCard
CharacterCard2 --|> CharacterCard
CharacterCard3 --|> CharacterCard

Client --> Message

Server --> Message

Player --> Client

Main --> Server
Server --> Client

/' questo va capito se serve

class Log {
    level : LogLevel

    {static} +debug(message : String)
    {static} +info(message : String)
    {static} +error(message : String, killApp : Boolean)

}

enum LogLevel {
    DEBUG,
    INFO,
    ERROR       
}

'/



@enduml