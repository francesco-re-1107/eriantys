@startuml Eriantys_controller

class Controller {
    -games : List<Game>
    -registeredNicknames : Set<String>

    +registerNickname(nickname : String) : GameController
    +listGames() : List<GameListItem>
    +createGame(nickname: String, numberOfPlayers : int, expertMode : boolean) : GameController
    +joinGame(nickname : String, uuid : UUID) : GameController
    +disconnect(nickname : String)
    +onGameUpdate(game : Game)
    +isRegistered(nickname : String) : boolean
    -startAutoSaveTimer()
    -saveGames()
    -loadBackupIfPresent()
    -findGameByNickname(nickname : String) : Game
    -findPlayerInGame(nickname : String, game : Game) : Player
}

class GameController {
    -game : Game
    -listener : GameUpdateListener
    -player : Player
    -lastUpdate : Game
    +GameController(game : Game player : Player)
    +setOnGameUpdateListener(listener : GameUpdateListener)
    +onGameUpdate(game : Game)
    +playAssistantCard(card : AssistantCard)
    +placeStudents(inSchool : StudentsContainer, inIslands : Map<Integer, StudentsContainer>)
    +playCharacterCard(reducedCard : ReducedCharacterCard)
    +moveMotherNature(steps : int)
    +selectCloud(cloud : StudentsContainer)
    +disconnect()
    +leaveGame()
}

class VirtualView {
    -communicator : ServerClientCommunicator
    -controller : Controller
    -gameController : GameController
    -nickname : String

    +VirtualView(Controller controller, Socket socket)
    +run()
    +onGameUpdate(game : ReducedGame)
    +onRequest(request : Request)
    +processRequest(request : Request)
    +onDisconnect()
    +setGameController(gameController : GameController)
    +isConnected() : boolean
    +getNickname() : String
    +setNickname(nickname : String)
}

class ServerClientCommunicator{
    -socket : Socket
    -listener : CommunicatorListener
    -isConnected : boolean

    +ServerClientCommunicator(socket : Socket, listener : CommunicatorListener)
    +startListening()
    +send(response : Response)
    -disconnect()
}

class ClientServerCommunicator{
    -socket : Socket
    -listener : CommunicatorListener
    -isConnected : boolean
    -pendingRequests : Map<UUID, ListenersPair>

    +ServerClientCommunicator(socket : Socket, listener : CommunicatorListener)
    +startListening()
    +send(request : Request, Consumer<Reply> successListener, Consumer<Exception> errorListener)
    -disconnect()
    -processReply(re : Reply)
    -startPinging()
}

interface ClientServerCommunicator.SuccessListener {
    void onSuccess(reply : Reply)
}

interface ClientServerCommunicator.ErrorListener {
    void onError(e : Exception)
}

class ClientServerCommunicator.ListenersPair {
    -successListener : Consumer<Reply>
    -errorListener : Consumer<Exception>

    +ListenersPair(successListener : Consumer<Reply>, errorListener : Consumer<Exception>)
}

interface ClientServerCommunicator.CommunicatorListener{
    +onUpdate(update : Update)
    +onDisconnect()
}

interface ServerClientCommunicator.CommunicatorListener{
    +onRequest(request : Request)
    +onDisconnect()
}

VirtualView "0..1" *-- GameController
VirtualView "1" *-- Controller
VirtualView "1" *-- ServerClientCommunicator
VirtualView --|> ServerClientCommunicator.CommunicatorListener
Controller --> GameController
ServerClientCommunicator --> ServerClientCommunicator.CommunicatorListener
ClientServerCommunicator --> ClientServerCommunicator.CommunicatorListener
ClientServerCommunicator --> ClientServerCommunicator.SuccessListener
ClientServerCommunicator --> ClientServerCommunicator.ErrorListener
ClientServerCommunicator --> ClientServerCommunicator.ListenersPair
Client --|> ClientServerCommunicator.CommunicatorListener

@enduml