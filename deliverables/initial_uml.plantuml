@startuml Eriantys

class AssistantCard {
    -motherNatureMaxMoves : Int
    -turnPriority : Int

    +AssistantCard(turnPriority : int, motherNatureMaxMoves : int)
    +getMotherNatureMaxMoves() : int
    +getTurnPriority() : int
    {static}+getDefaultDeck() : List<AssistantCard>
}

class Game {
    -players : List<Player>
    -numberOfPlayers : int
    -expertMode : boolean
    -islands : List<Island>
    -studentsBag : RandomizedStudentsContainer
    'relative to islands index, or alternatively we can link directly the island'
    -motherNaturePosition : int
    -round : Round
    -characterCards : Map<String, Integer> //3 cards selected for this game and counter
    -currentProfessors : Map<Student, Player>
    -gameState : Game.State
    -defaultInfluenceCalculator : InfluenceCalculator
    -temporaryInfluenceCalculator : InfluenceCalculator

    +Game(int numberOfPlayers, boolean expertMode)
    -initializeIslands()
    +startGame()
    +newRound()
    +selectCloud(cloud : StudentsContainer, player : Player)
    +addPlayer(nickname : String) : Player
    +moveMotherNature(int steps)
    -calculateInfluenceOnCurrentIsland()
    +calculateInfluenceOnIsland(island : Island)
    +useCharacterCard(player : Player, card : CharacterCard)
    -checkAndMergeIslands()
    +getCurrentIsland() : Island
    -calculateMotherNatureIndex(int steps) : int
    +getPlayers() : List<Player>
    +getNumberOfPlayers() : int
    +getCurrentNumberOfPlayers() : int
    +getIslands() : List<Island>
    +getMotherNaturePosition() : int
    +getCurrentRound() : Round
    +getCharacterCards() : List<CharacterCard>
    +getProfessors() : Map<Student, Player>
    +updateProfessors()
    +putStudents(inSchool : StudentsContainer, inIslands : Map<Island, StudentsContainer>)
    +addGameUpdateListener(...)
    -notifyUpdate()
    +getGameState() : Game.State
    +pauseGame()
    +restartGame()
}

enum Game.State {
    CREATED //game was created but never started
    STARTED //game is currently played
    PAUSED //when a client disconnects, the game is paused
    FINISHED //game finished, there's a winner
    {field}TERMINATED //game terminated before finish (e.g. a player left the game)
}

class Round {
    -stage : Stage = Stage.PLAN
    -players : List<Players>
    -playedAssistantCards : List<AssistantCard>
    -clouds : List<StudentsContainer> //max students = 3 or 4
    -currentPlayer : int = 0

    +Round(players : List<Players>, clouds : List<StudentsContainer>)
    -nextStage()
    +playAssistantCard(player : Player, card : AssistantCard)
    +nextPlayer()
    +getStage() : Stage
    +getPlayers() : List<Player>
    +getCardPlayedBy(Player player) : Optional<AssistantCard>
    +getCurrentPlayer() : Player
    +getClouds() : List<StudentsContainer>
    +removeCloud(cloud : StudentsContainer)
}

enum Round.Stage {
    PLAN,
    ATTACK
}

abstract AStudentsContainer {
    -students : Map<Student, Integer>
    -maxSize : int

    +AStudentsContainer()
    +AStudentsContainer(maxSize : int)
    +getSize() : int
    +setMaxSize(maxSize : int)
    +getStudents() : Map<Student, Integer>
    +getCountForStudent(student : Student) : int
}

class RandomizedStudentsContainer {
    -random : Random

    +RandomizedStudentsContainer(studentsPerColor : int)
    +pickOneRandom() : Student
    +pickManyRandom(howMany : Integer) : StudentsContainer
}

class StudentsContainer {
    +StudentsContainer()
    +StudentsContainer(maxSize : int)
    +StudentsContainer(studentsContainer : AStudentsContainer)
    +StudentsContainer(studentsContainer : AStudentsContainer, maxSize : int)
    +addStudent(student : Student)
    +addStudents(student : Student, howMany : int)
    +removeStudent(student : Student)
    +addAll(anotherContainer : AStudentsContainer)
    +removeAll(anotherContainer : AStudentsContainer)
    +addOnStudentNumberReachedListener(student : Student, count : int) //for coins
}

class Player {
    -nickname : String
    -entrance : StudentsContainer
    -school : StudentsContainer
    -towersCount : int
    -towerColor : Tower
    -deck : Map<AssistantCard, Boolean> //<card, usedOrNot>
    -coins : int = 1

    +Player(nickname : String, towerColor : Tower, numberOfPlayers : int)
    +getNickname() : String
    +getTowersCount() : int
    +setTowersCount(towersCount : int)
    +getTowerColor() : Tower
    +setCoins(coins : int)
    +getCoins() : int
    +addStudentsInSchool(students : StudentsContainer)
    +playAssistantCard(card : AssistantCard)
    +canPlayAssistantCard(card : AssistantCard)
    +swap(studentsToAdd : StudentsContainer, studentsToRemove : StudentsContainer) //used by a character card
    +addCloudToEntrance(cloud : StudentsContainer)
}

class Island {
    -students : StudentsContainer
    -towersCount : int = 0
    -towerColor : Tower
    -noEntry : boolean = false

    +Island()
    +Island(defaultStudent : Student)
    +getSize() : int //it's determined by looking at towers.size
    +getTowersCount() : int
    +getTowerColor() : int
    +getStudents() : StudentsContainer
    +addStudent(student : Student)
    +addStudents(students : StudentsContainer)
    +merge(anotherIsland : Island)
    +setConquered(towerColor : Tower)
    +isConquered() : boolean
    +isNoEntry() : boolean
    +setNoEntry() : boolean
    +isMergeCompatible(anotherIsland : Island) : boolean
}

interface InfluenceCalculator {
    +calculateInfluence(island : Island, player : Player, professors : Map<Student, Player>)
}

class DefaultInfluenceCalculator {
    +calculateInfluence(island : Island, player : Player, professors : Map<Student, Player>)
    -calculateTowersInfluence() : int
    -calculateStudentsInfluence() : int
}

class NoTowersInfluenceCalculator {
    {method}@override
    -calculateTowersInfluence() : int
}

class AdditionalPointsInfluenceCalculator {
    -player : Player
    {method}@override
    +calculateInfluence() : int
}

class NoColorInfluenceCalculator {
    -student : Student
    {method}@override
    +calculateStudentsInfluence() : int
}

class ProfessorsControlInfluenceCalculator{
    -player : Player
    {method}@override
    +calculateStudentsInfluence() : int
}

abstract CharacterCard {
    cost : Int

    +getCost() : Int
    +getCost(int usedTimes) : Int
}

abstract InfluenceCharacterCard {
    +getInfluenceCalculator() : InfluenceCalculator
}

class FarmerCharacterCard {
    //take control of the professors of a color if players
    //have the same number of students for that color
    'redefine cost'
    cost : Int = 2
    player : Player

    {method}@override
    +getInfluenceCalculator() : InfluenceCalculator
}

class HeraldCharacterCard {
    //choose an island and calculate influence on that island
    -island : Island
    'redefine cost'
    cost : Int = 3

    +getIsland() : Island
}

class PostmanCharacterCard {
    //2 additional moves for mother nature
    'redefine cost'
    cost : Int = 1

    +getAdditionalMotherNatureMoves() : int
}

class GrandmaCharacterCard {
    //no entry on the selected island
    -island : Island
    'redefine cost'
    cost : Int = 2
    +getIsland() : Island
}

class CentaurCharacterCard {
    //no towers in influence
    'redefine cost'
    cost : Int = 3

    {method}@override
    +getInfluenceCalculator() : InfluenceCalculator
}

class MinstrelCharacterCard {
    //swap two students between school and entrance
    -studentsToRemove : StudentsContainer
    -studentsToAdd : StudentsContainer
    'redefine cost'
    cost : Int = 1

    +getStudentsToRemove() : StudentsContainer
    +getStudentsToAdd() : StudentsContainer
}

class KnightCharacterCard {
    //2 additional points in influence
    'redefine cost'
    cost : Int = 2
    player : Player

    {method}@override
    +getInfluenceCalculator() : InfluenceCalculator
}

class MushroomManCharacterCard {
    //no color in influence
    'redefine cost'
    cost : Int = 3
    studentColorNotInfluencing: Student

    {method}@override
    +getInfluenceCalculator() : InfluenceCalculator
}

enum Tower {
    WHITE
    BLACK
    GREY
}

enum Student {
    YELLOW
    BLUE
    GREEN
    RED
    PINK
}

class Error {}
class InvalidOperationError {
    +InvalidOperationError()
    +InvalidOperationError(message : String)
}

class Exception {}
class DuplicateException {}
class IslandNotCompatibleException {}
class StudentNotFoundException {}
class StudentsMaxReachedException {}

InvalidOperationError --|> Error
DuplicateException --|> Exception
IslandNotCompatibleException --|> Exception
StudentNotFoundException --|> Exception
StudentsMaxReachedException --|> Exception

/'
class Client {
    clientSocket : Socket

    +sendMessage(message : Message)
    +addMessageReceivedObserver()
}

interface MessageReceivedObserver {
    onMessageReceived(message : Message)
}

class Server {
    serverSocket : Socket
    activeGames : ArrayList<Game>

    +getInstance() : Server
    +startServer()
}

class App {
    +{static} main
}

interface Serializable {
    ...
}

abstract Message {
    parse()
}

interface Exportable {
    exportToJson() : String
    importFromJson(json : String)
}
'/

Game "2..4" *-- Player
Game "1" *-- RandomizedStudentsContainer
Game "12" *-- Island
Game *-- Round
Game "3" *-- CharacterCard
Game "1" *-- Game.State

Player "10" *-- AssistantCard
'Player --> Tower'
Player "2" *-- StudentsContainer

StudentsContainer --|> AStudentsContainer
RandomizedStudentsContainer --|> AStudentsContainer

'Student --> AStudentsContainer'

Island "1" *-- StudentsContainer

Round "1" *-- Round.Stage

InfluenceCharacterCard --> InfluenceCalculator
InfluenceCharacterCard --|> CharacterCard

FarmerCharacterCard --|> InfluenceCharacterCard
CentaurCharacterCard --|> InfluenceCharacterCard
KnightCharacterCard --|> InfluenceCharacterCard
MushroomManCharacterCard --|> InfluenceCharacterCard

HeraldCharacterCard --|> CharacterCard
PostmanCharacterCard --|> CharacterCard
GrandmaCharacterCard --|> CharacterCard
MinstrelCharacterCard --|> CharacterCard

DefaultInfluenceCalculator ..|> InfluenceCalculator

NoTowersInfluenceCalculator --|> DefaultInfluenceCalculator
AdditionalPointsInfluenceCalculator --|> DefaultInfluenceCalculator
NoColorInfluenceCalculator --|> DefaultInfluenceCalculator
ProfessorsControlInfluenceCalculator --|> DefaultInfluenceCalculator

@enduml